基本ルール
方針整理（個数ベース積載ロジック）
[目的] truck×container ルールの「最大積載容器数（段積み後）」を上限として、容器本数ベースで割付する。
[前提] ルールの max_quantity は段積み後の最終本数。stack_count 未指定時は容器側 max_stack を参照。
要件の確認ポイント
[優先順位]
納期優先 → ルールの優先度 → 容器枠の余りが少なくなる順（Fit）
[フォールバック]
当日枠不足時の扱い:
前倒し可の製品は前日へ移動する
同日内で別トラックへ寄せる
どこにも入らない場合は特便を使う（トラックNO_5_10T　これはNO_3_10Tと同じく翌日着く）
[混載]
同一トラックへ「異容器」はOK想定（ルールに存在する組合せのみ）。
[上限の定義]
トラック×容器の合計本数上限= max_quantity（これだけ）。トラック容量（体積/重量）上限はいらない。
提案アーキテクチャ（変更最小）
[容器枠の導入]
積載日ごと・トラックごとに「容器ID→残本数」を持つ。初期値は truck×container ルールの max_quantity。
[割付順序]
日付昇順 → ルール優先度降順 → 需要の大きい順（または容器容量効率の高い順）
[割付ループ]
明細ごとに、想定容器IDを決定（製品に紐づく容器IDを使用）
対象トラック群の中から、その容器の残枠があるトラックに本数を割付
本数は「必要本数 vs 残枠 vs 体積/重量の空き容量（これはいらない？）」の最小
[フォールバック]
当日不可 → 同日別トラック → 前倒し可なら前日へ → それでも不可は 前日に特便を使う（トラックNO_5_10T）へ

指標の再計算
[利用率]
これまでの体積/重量ベースの利用率は不要
「容器枠利用率（容器本数ベース）」使用（例: 本数使用 / ルール上限）
データ前提
[製品→容器] products.used_container_id, products.capacity が必要
[容器寸法/重量] container_capacity の寸法・重量（推定用）
[ルール] truck_container_rules(max_quantity, stack_count, priority)
テスト観点
[正常系] ルールが十分な枠を持つケース
[枠不足] 余った分が別トラックへ寄せられる
[前倒し] 前倒し可設定の製品が前日に移動する
[ルール無し] 組合せが無い時のフォールバック（現行サイズベース or 積載不可）
[サイズ超過] 容器枠内でも体積で弾かれる
決めたいこと
[優先順位] 「納期 > ルール優先度 > フィット」 で良い
[フォールバック順] 「同日別トラック → 前倒し → 不可」で良い
[ルール無し扱い] ルールが無い組合せは「サイズベースで許容」
[指標] 容器枠の利用率(%)サマリーに表

トラック台数: デフォルト3台 + 非デフォルト1台（必要時）
前倒しルール: 1日前のみ可能
段積み対応: 容器の段積み属性を考慮
処理フロー
Step 1: 需要分析とトラック台数決定 

受注データから各日の需要を集計
製品の容器情報、段積み可能性を考慮して底面積を計算
トラックの到着日オフセットから積載日を決定
日平均積載量がデフォルトトラック容量を超える場合、非デフォルトトラックを使用
Step 2: 前倒し処理 

最終日から逆順に処理
各日の積載量がトラック容量を超過する場合、前倒し可能製品を前日に移動
トラックごとの積載状況を追跡し、製品が使用できるトラックで判定
既に前倒しされた製品は再度前倒ししない（1日前のみルール）
Step 3: 日次積載計画作成 
製品を優先度順にソートして積載:

優先順位:

前倒しされた製品
トラック制約が1つのみの製品（最優先）
優先積載製品に指定されている製品
トラック制約がある製品
その他
トラック選択優先順位:

優先積載製品に指定されているトラック
同容器が既に積載されているトラック（段積み統合）
空き容量が大きいトラック
段積み処理:

同じ容器が既に積載されている場合、段積みとして統合
追加で
分割積載:

トラック容量が不足する場合、容器単位で分割して積載
Step 4: 積み残しの再配置 
積み残しを他のトラック候補の積載日に再配置を試みる、各トラックの正しい積載日に空きがあれば配置
元の積載日と同じ日はスキップ（既に失敗済み）
Step 5: 積み残しの前倒し 
最終日から逆順に処理
前倒し可能フラグ（can_advance）がtrueの製品のみ対象
前日のトラックに空きがあれば前倒し配送
前倒しフラグ（is_advanced）を設定
Step 6: 前日特便配送 
前倒しできなかった積み残しは前日特便＝非デフォルトトラックを出す
非デフォルトトラックは翌日着くため、前倒しとならない
主要な計算ロジック




積載率計算
容器別に集計して段積みを考慮
積載率 = 
calendar_repoを使用して営業日のみで計画
トラックの積載日が非営業日の場合、前の営業日に調整
出力データ
daily_plans: 日別の積載計画（トラック、製品、積載率）
summary: 総トリップ数、警告数、ステータス
warnings: 積み残し警告（前倒し可/不可を表示）
remaining_demands: 最終的な積み残しリスト
このロジックにより、トラック容量を最大限活用しながら、納期を守る最適な運送計画を自動生成しています